{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Pet Adoption System - Complete Data Schema",
  "description": "Comprehensive MongoDB schema for all models in the Pet Adoption Management System",
  "definitions": {
    "Pet": {
      "type": "object",
      "title": "Pet Model",
      "description": "Schema for pet documents in the pets collection",
      "required": ["name", "animal", "breed", "age", "medicalCondition"],
      "properties": {
        "_id": {
          "type": "string",
          "description": "MongoDB ObjectId (auto-generated)",
          "pattern": "^[0-9a-fA-F]{24}$"
        },
        "name": {
          "type": "string",
          "description": "Pet's name",
          "maxLength": 50,
          "minLength": 1,
          "examples": ["Bella", "Milo", "Rocky", "Luna"]
        },
        "animal": {
          "type": "string",
          "description": "Type of animal",
          "enum": ["dog", "cat", "bird", "rabbit", "hamster", "fish", "other"],
          "examples": ["dog", "cat", "bird"]
        },
        "breed": {
          "type": "string",
          "description": "Pet's breed",
          "maxLength": 50,
          "minLength": 1,
          "examples": ["Labrador Mix", "Tabby", "Beagle", "Siamese"]
        },
        "age": {
          "type": "number",
          "description": "Pet's age in years (can be decimal for months)",
          "minimum": 0,
          "maximum": 30,
          "examples": [2, 1, 3, 0.7, 4]
        },
        "medicalCondition": {
          "type": "string",
          "description": "Pet's medical condition and health information",
          "maxLength": 500,
          "minLength": 1,
          "examples": ["Healthy, vaccinated.", "Mild food allergy."]
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the pet record was created"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the pet record was last updated"
        },
        "__v": {
          "type": "number",
          "description": "Version key (auto-generated by Mongoose)",
          "minimum": 0
        }
      },
      "additionalProperties": false,
      "indexes": {
        "animal": 1,
        "breed": 1,
        "age": 1,
        "createdAt": -1
      }
    },
    "User": {
      "type": "object",
      "title": "User Model",
      "description": "Schema for user documents in the users collection",
      "required": ["email", "password", "name", "phone"],
      "properties": {
        "_id": {
          "type": "string",
          "description": "MongoDB ObjectId (auto-generated)",
          "pattern": "^[0-9a-fA-F]{24}$"
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "User's email address (unique)",
          "pattern": "^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$",
          "examples": ["user@example.com", "john.doe@email.com"]
        },
        "password": {
          "type": "string",
          "description": "Hashed password (bcrypt)",
          "minLength": 6,
          "note": "Stored as bcrypt hash with salt rounds 12"
        },
        "name": {
          "type": "string",
          "description": "User's full name",
          "maxLength": 100,
          "minLength": 1,
          "examples": ["John Doe", "Sarah Johnson"]
        },
        "photo": {
          "type": "string",
          "format": "uri",
          "description": "User's profile photo URL (optional)",
          "pattern": "^https?:\\/\\/.+",
          "examples": ["https://example.com/photo.jpg"]
        },
        "phone": {
          "type": "string",
          "description": "User's phone number",
          "pattern": "^[\\+]?[\\d]{8,15}$",
          "examples": ["+1234567890", "0649916003"]
        },
        "role": {
          "type": "string",
          "enum": ["user", "admin"],
          "default": "user",
          "description": "User role in the system"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the user account was created"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the user account was last updated"
        },
        "__v": {
          "type": "number",
          "description": "Version key (auto-generated by Mongoose)",
          "minimum": 0
        }
      },
      "additionalProperties": false,
      "indexes": {
        "email": 1,
        "createdAt": -1
      }
    },
    "Admin": {
      "type": "object",
      "title": "Admin Model",
      "description": "Schema for admin documents in the admins collection",
      "required": ["email", "password"],
      "properties": {
        "_id": {
          "type": "string",
          "description": "MongoDB ObjectId (auto-generated)",
          "pattern": "^[0-9a-fA-F]{24}$"
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "Admin's email address (unique)",
          "pattern": "^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$",
          "examples": ["admin@petadoption.com"]
        },
        "password": {
          "type": "string",
          "description": "Hashed password (bcrypt)",
          "minLength": 6,
          "note": "Stored as bcrypt hash with salt rounds 12"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the admin account was created"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the admin account was last updated"
        },
        "__v": {
          "type": "number",
          "description": "Version key (auto-generated by Mongoose)",
          "minimum": 0
        }
      },
      "additionalProperties": false,
      "indexes": {
        "email": 1,
        "createdAt": -1
      }
    },
    "AdoptionRequest": {
      "type": "object",
      "title": "Adoption Request Model",
      "description": "Schema for adoption request documents in the adoptionrequests collection",
      "required": ["userName", "phoneNumber", "pet", "pickupDate", "message", "responsibilityAccepted"],
      "properties": {
        "_id": {
          "type": "string",
          "description": "MongoDB ObjectId (auto-generated)",
          "pattern": "^[0-9a-fA-F]{24}$"
        },
        "userName": {
          "type": "string",
          "description": "Name of the person requesting adoption",
          "maxLength": 100,
          "minLength": 1,
          "examples": ["Sarah Johnson", "Michael Chen"]
        },
        "phoneNumber": {
          "type": "string",
          "description": "Phone number of the requester",
          "pattern": "^[\\+]?[1-9][\\d]{0,15}$",
          "examples": ["+1234567890", "0649916003"]
        },
        "pet": {
          "type": "string",
          "description": "ObjectId reference to the Pet document",
          "pattern": "^[0-9a-fA-F]{24}$"
        },
        "pickupDate": {
          "type": "string",
          "format": "date-time",
          "description": "Requested pickup date (must be in the future)"
        },
        "message": {
          "type": "string",
          "description": "Message from the adopter",
          "maxLength": 1000,
          "minLength": 1,
          "examples": ["I would love to adopt this pet..."]
        },
        "responsibilityAccepted": {
          "type": "boolean",
          "description": "Whether the adopter accepts responsibility",
          "const": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the request was created"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the request was last updated"
        },
        "__v": {
          "type": "number",
          "description": "Version key (auto-generated by Mongoose)",
          "minimum": 0
        }
      },
      "additionalProperties": false,
      "indexes": {
        "pet": 1,
        "pickupDate": 1,
        "createdAt": -1
      }
    },
    "Adopter": {
      "type": "object",
      "title": "Adopter Model (Extended User Profile)",
      "description": "Schema for adopter profiles with additional adoption-specific information",
      "required": ["name", "email", "phone", "status", "experience", "housingType", "petPreference"],
      "properties": {
        "_id": {
          "type": "string",
          "description": "MongoDB ObjectId (auto-generated)",
          "pattern": "^[0-9a-fA-F]{24}$"
        },
        "name": {
          "type": "string",
          "description": "Adopter's full name",
          "maxLength": 100,
          "minLength": 1,
          "examples": ["Sarah Johnson", "Michael Chen"]
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "Adopter's email address",
          "pattern": "^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$",
          "examples": ["sarah.johnson@email.com"]
        },
        "phone": {
          "type": "string",
          "description": "Adopter's phone number",
          "pattern": "^[\\+]?[\\d\\s\\-\\(\\)]{10,20}$",
          "examples": ["+1 (555) 123-4567", "0649916003"]
        },
        "status": {
          "type": "string",
          "enum": ["active", "approved", "pending", "rejected"],
          "description": "Current status of the adopter in the system",
          "examples": ["approved", "pending"]
        },
        "experience": {
          "type": "string",
          "enum": ["first-time", "some", "experienced"],
          "description": "Adopter's experience level with pets",
          "examples": ["experienced", "first-time"]
        },
        "housingType": {
          "type": "string",
          "enum": ["house", "apartment", "condo", "townhouse", "other"],
          "description": "Type of housing the adopter lives in",
          "examples": ["house", "apartment"]
        },
        "petPreference": {
          "type": "string",
          "description": "Adopter's preferred type of pet",
          "examples": ["dog", "cat", "any", "small dog", "large dog"]
        },
        "applicationDate": {
          "type": "string",
          "format": "date",
          "description": "Date when the adopter submitted their application"
        },
        "lastContact": {
          "type": "string",
          "format": "date",
          "description": "Date of last contact with the adopter"
        },
        "address": {
          "type": "object",
          "description": "Adopter's address information",
          "properties": {
            "street": {
              "type": "string",
              "description": "Street address",
              "maxLength": 200
            },
            "city": {
              "type": "string",
              "description": "City",
              "maxLength": 100
            },
            "state": {
              "type": "string",
              "description": "State or province",
              "maxLength": 100
            },
            "zipCode": {
              "type": "string",
              "description": "ZIP or postal code",
              "maxLength": 20
            },
            "country": {
              "type": "string",
              "description": "Country",
              "maxLength": 100,
              "default": "Thailand"
            }
          }
        },
        "emergencyContact": {
          "type": "object",
          "description": "Emergency contact information",
          "properties": {
            "name": {
              "type": "string",
              "description": "Emergency contact name",
              "maxLength": 100
            },
            "phone": {
              "type": "string",
              "description": "Emergency contact phone",
              "pattern": "^[\\+]?[\\d\\s\\-\\(\\)]{10,20}$"
            },
            "relationship": {
              "type": "string",
              "description": "Relationship to adopter",
              "maxLength": 50,
              "examples": ["spouse", "parent", "sibling", "friend"]
            }
          }
        },
        "veterinarianInfo": {
          "type": "object",
          "description": "Veterinarian information for experienced adopters",
          "properties": {
            "clinicName": {
              "type": "string",
              "description": "Veterinary clinic name",
              "maxLength": 200
            },
            "doctorName": {
              "type": "string",
              "description": "Veterinarian's name",
              "maxLength": 100
            },
            "phone": {
              "type": "string",
              "description": "Clinic phone number",
              "pattern": "^[\\+]?[\\d\\s\\-\\(\\)]{10,20}$"
            }
          }
        },
        "notes": {
          "type": "string",
          "description": "Additional notes about the adopter",
          "maxLength": 1000
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the adopter profile was created"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the adopter profile was last updated"
        },
        "__v": {
          "type": "number",
          "description": "Version key (auto-generated by Mongoose)",
          "minimum": 0
        }
      },
      "additionalProperties": false,
      "indexes": {
        "email": 1,
        "status": 1,
        "experience": 1,
        "applicationDate": -1,
        "createdAt": -1
      }
    }
  },
  "collections": {
    "pets": {
      "description": "Collection storing all pet information",
      "schema": "#/definitions/Pet",
      "estimatedDocuments": "20-1000+",
      "primaryUseCase": "Pet listing, search, and adoption management"
    },
    "users": {
      "description": "Collection storing regular user accounts",
      "schema": "#/definitions/User",
      "estimatedDocuments": "100-10000+",
      "primaryUseCase": "User authentication and profile management"
    },
    "admins": {
      "description": "Collection storing admin accounts",
      "schema": "#/definitions/Admin",
      "estimatedDocuments": "1-10",
      "primaryUseCase": "Admin authentication and system management"
    },
    "adoptionrequests": {
      "description": "Collection storing adoption requests",
      "schema": "#/definitions/AdoptionRequest",
      "estimatedDocuments": "50-5000+",
      "primaryUseCase": "Managing adoption applications and requests"
    },
    "adopters": {
      "description": "Collection storing detailed adopter profiles (optional - can extend users)",
      "schema": "#/definitions/Adopter",
      "estimatedDocuments": "50-1000+",
      "primaryUseCase": "Detailed adopter management and screening"
    }
  },
  "relationships": {
    "AdoptionRequest.pet": {
      "type": "reference",
      "target": "pets._id",
      "description": "Each adoption request references a specific pet"
    },
    "User.role": {
      "type": "enum",
      "description": "Users can have admin role, linking to admin functionality"
    },
    "Adopter.email": {
      "type": "potential_reference",
      "target": "users.email",
      "description": "Adopters may be linked to user accounts via email"
    }
  },
  "validation_rules": {
    "global": {
      "email_format": "Must be valid email format with @ and domain",
      "phone_format": "8-15 digits, optionally starting with +",
      "password_security": "Minimum 6 characters, stored as bcrypt hash",
      "timestamps": "All models include createdAt and updatedAt"
    },
    "business_logic": {
      "adoption_requests": "Pickup date must be in the future",
      "responsibility": "Adopters must accept responsibility (true)",
      "pet_age": "Pet age must be between 0-30 years",
      "unique_constraints": "Email addresses must be unique across users and admins"
    }
  },
  "indexes_summary": {
    "performance_indexes": {
      "pets": ["animal", "breed", "age", "createdAt"],
      "users": ["email", "createdAt"],
      "admins": ["email", "createdAt"],
      "adoptionrequests": ["pet", "pickupDate", "createdAt"],
      "adopters": ["email", "status", "experience", "applicationDate", "createdAt"]
    },
    "unique_indexes": {
      "users.email": "Ensures unique user emails",
      "admins.email": "Ensures unique admin emails"
    }
  },
  "sample_data_examples": {
    "pet_example": {
      "name": "Bella",
      "animal": "dog",
      "breed": "Labrador Mix",
      "age": 2,
      "medicalCondition": "Healthy, vaccinated. Up to date on all shots and spayed."
    },
    "user_example": {
      "email": "john.doe@email.com",
      "name": "John Doe",
      "phone": "+1234567890",
      "role": "user"
    },
    "adoption_request_example": {
      "userName": "Sarah Johnson",
      "phoneNumber": "+1234567890",
      "pet": "507f1f77bcf86cd799439011",
      "pickupDate": "2024-02-15T10:00:00.000Z",
      "message": "I would love to adopt Bella. I have experience with dogs and a large backyard.",
      "responsibilityAccepted": true
    },
    "adopter_example": {
      "name": "Sarah Johnson",
      "email": "sarah.johnson@email.com",
      "phone": "+1 (555) 123-4567",
      "status": "approved",
      "experience": "experienced",
      "housingType": "house",
      "petPreference": "dog",
      "applicationDate": "2024-01-15"
    }
  },
  "notes": {
    "implementation": {
      "framework": "Mongoose ODM with MongoDB",
      "authentication": "bcrypt for password hashing with salt rounds 12",
      "validation": "Mongoose schema validation with custom validators",
      "timestamps": "Automatic createdAt and updatedAt fields"
    },
    "scalability": {
      "indexing": "Comprehensive indexing strategy for query performance",
      "references": "ObjectId references for data relationships",
      "collections": "Separate collections for different entity types"
    },
    "security": {
      "password_storage": "Never store plain text passwords",
      "email_validation": "Server-side email format validation",
      "phone_validation": "International phone number format support",
      "input_sanitization": "Trim whitespace and validate lengths"
    }
  }
}